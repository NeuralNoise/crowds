<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/atom10full.xsl" type="text/xsl" media="screen"?><?xml-stylesheet href="http://feeds.feedburner.com/~d/styles/itemcontent.css" type="text/css" media="screen"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><id>tag:blogger.com,1999:blog-3239741</id><updated>2006-11-30T20:12:01.771-08:00</updated><title type="text">Technoblog</title><link rel="alternate" type="text/html" href="http://tech.rufy.com/index.html" /><link rel="next" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default?start-index=26&amp;max-results=25" /><link rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml" href="http://feeds.feedburner.com/rufytech" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><generator version="7.00" uri="http://beta.blogger.com">Blogger</generator><openSearch:totalResults>30</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><geo:lat>45.49894</geo:lat><geo:long>-122.68781</geo:long><creativeCommons:license>http://creativecommons.org/licenses/by-sa/2.0/</creativeCommons:license><link rel="self" href="http://feeds.feedburner.com/rufytech" type="application/atom+xml" /><feedburner:browserFriendly>This is an XML content feed. It is intended to be viewed in a newsreader or syndicated to another site.</feedburner:browserFriendly><entry><id>tag:blogger.com,1999:blog-3239741.post-6492576254609855002</id><published>2006-11-16T06:32:00.000-08:00</published><updated>2006-11-16T10:01:58.952-08:00</updated><title type="text">Context Switches</title><content type="html">Joel Spolsky &lt;a href="http://www.joelonsoftware.com/items/2006/11/15.html"&gt;responded&lt;/a&gt; to Dmitri Zimine's article about &lt;a href="http://www.agileadvice.com/archives/2006/11/how_two_hours_c.html"&gt;context swtiching&lt;/a&gt;. Dmitri talks about the developer pains caused by context switches and  how abusing context switching can lead to lower productivity and less code for your dollar. Joel's response is that if you work against context switching, you are not being agile. He backs his reasoning with an example: a huge bug was discovered that crashed the browser for a loyal customer, so their 2.0 release was held back to fix this.&lt;br /&gt;&lt;br /&gt;First of all, Joel declares that having two week release cycles is not agile, which I think is a faulty assumption to start with. Telling a client that they will have to wait two weeks for the feature of their dreams is not always the deal breaker situation Joel makes it out to be, in fact I would think most clients would be impressed if a company released a requested feature within two weeks.&lt;br /&gt;&lt;br /&gt;More importantly, there is a huge difference between necessary and unnecessary context switches. The high priority bug fix that Joel mentions is indeed a good reason to switch contexts, however that doesn't mean that if some random person in Zimbabwe says that he wants them to add feature X before the next release, I would hardly think that would be a good reason to switch contexts and focus on X. There certainly should be some abstraction and safety nets in place to make sure that programmers switch context as little as possible but no less. To say, as Joel does, that a 30" monitor means that a great programmer should magically be able to switch context on demand for any reason is a gross over-generalization.&lt;br /&gt;&lt;br /&gt;Abuse your car's clutch and it will eventually break, no matter how good of a car or how well you take care of the rest of it.
&lt;p&gt;&lt;map name="google_ad_map_lef9knekgwp1xulxgeAL0MrKiO8_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/lef9knekgwp1xulxgeAL0MrKiO8_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_lef9knekgwp1xulxgeAL0MrKiO8_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=lef9knekgwp1xulxgeAL0MrKiO8_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F11%2Fcontext-switches.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/50205727/context-switches.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/6492576254609855002" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/6492576254609855002" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/11/context-switches.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-2742162884610011507</id><published>2006-11-13T14:34:00.000-08:00</published><updated>2006-11-13T14:37:47.458-08:00</updated><title type="text">Syntactic Vinegar vs. Syntactic Sugar</title><content type="html">Syntactic vinegar is to punishing your dog for bad behavior as syntactic sugar is to rewarding them for good behavior.&lt;br /&gt;&lt;br /&gt;I certainly don't want to be the dog being choked and scolded all day.
&lt;p&gt;&lt;map name="google_ad_map_36xYc4L5ypDlibn9SNKss7Y9rCI_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/36xYc4L5ypDlibn9SNKss7Y9rCI_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_36xYc4L5ypDlibn9SNKss7Y9rCI_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=36xYc4L5ypDlibn9SNKss7Y9rCI_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F11%2Fsyntactic-vinegar-vs-syntactic-sugar.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/48921852/syntactic-vinegar-vs-syntactic-sugar.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/2742162884610011507" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/2742162884610011507" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/11/syntactic-vinegar-vs-syntactic-sugar.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-3756214621470142654</id><published>2006-11-13T11:17:00.000-08:00</published><updated>2006-11-13T12:25:12.108-08:00</updated><title type="text">A Fatal Flaw in Opinionated Software</title><content type="html">&lt;span style="font-family: georgia;"&gt;David Heinemeier Hansson has written a lot about opinionated software and &lt;/span&gt;&lt;a style="font-family: georgia;" href="http://www.loudthinking.com/arc/000601.html"&gt;syntactic vinegar&lt;/a&gt;&lt;span style="font-family: georgia;"&gt;. At first glance, the term opinionated software sounds perfectly reasonable. It seems, at least to me, to mean that the software looks and acts in a certain way... it has opinions like &lt;/span&gt;&lt;a style="font-family: georgia;" href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt;&lt;span style="font-family: georgia;"&gt; and  convention over configuration. That is not what opinionated software means to David. To David, a piece of opinionated software is written in such a way that makes it easy to do things one way and ugly and difficult to do things another way.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: georgia;"&gt;What does this mean? Glad you asked. Let's look for example at the ActiveRecord find method.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family:courier new;"&gt;User.find(:first, :conditions =&gt; "active = 1")&lt;br /&gt;# =&gt; #&lt;user:0x3f08434 attributes="{"&gt; "1", "active"=&gt;"1"}&gt;&lt;br /&gt;&lt;br /&gt;&lt;/user:0x3f08434&gt;&lt;/span&gt;&lt;span style="font-family:courier new;"&gt;User.find(:first, :with =&gt; {:active =&gt; 1})&lt;br /&gt;# ArgumentError: Unknown key(s): with&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family:georgia;"&gt;Ok, so the find method does not accept the key &lt;span style="font-family:courier new;"&gt;:with&lt;/span&gt;. That is fine, but let's say you and I are clever hackers and we wanted to enhance ActiveRecord to accept the &lt;span style="font-family:courier new;"&gt;:with&lt;/span&gt; key in order to do some neat magic that reduces the amount of code we have to write. For a Ruby developer, this type of modification sounds like it should be easy, but this is what I found when I first looked at the Rails source.&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family:courier new;"&gt;def validate_find_options(options) #:nodoc:&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family:courier new;"&gt;&lt;br /&gt; options.assert_valid_keys([:conditions, :include, :joins, :limit, :offset, :order, :select, :readonly, :group, :from])&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-family:courier new;"&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;That is right, the keys were all hard coded, meaning that if I wanted to add my own &lt;span style="font-family:courier new;"&gt;:with&lt;/span&gt; key, I would have to completely overwrite the undocumented &lt;/span&gt;&lt;/span&gt;&lt;span style="font-family:courier new;"&gt;&lt;span style="font-family:georgia;"&gt;&lt;span style="font-family:courier new;"&gt;validate_find_options &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="font-family:courier new;"&gt;&lt;span style="font-family:georgia;"&gt;method, which inevitably would break things down the line as Rails added its own new keys.&lt;br /&gt;&lt;br /&gt;When I first saw this I thought to myself: ah, must be an oversight. I wrote a patch in a few seconds that abstracted the array passed to &lt;span style="font-family:courier new;"&gt;options.assert_valid_keys&lt;/span&gt; into something mutable. I submitted the patch and had a lengthy discussion with DHH in which I was slapped by the opinionated software stick. Apparently, David thought that if I wanted to hack ActiveRecord, I was going to have to be punished by writing ugly code. It was the "opinion" of ActiveRecord that people shouldn't add a key to the find method, so David intentionally made it much harder than necessary to accomplish.&lt;br /&gt;&lt;br /&gt;That is right, this was not a simple oversight, this type of code was completely intentional. It is David's opinion that Rails be harder than necessary to hack around and play with. That if I was going to stretch the limits of Rails, take it places nobody else had thought of, that I should be punished for doing so, and that punishment is ugly code.&lt;br /&gt;&lt;br /&gt;This is the fatal flaw of opinionated software... in order to make design decisions that limit people's ability to do things you don't think they should do, you must punish them. The form of punishment that David is interested in is syntactic vinegar, like having to override a method instead of append to an array.&lt;br /&gt;&lt;br /&gt;The problem with this approach is that punishment is only appropriate for children and criminals. By actively working to make my life as a hacker more difficult, David is treating me like a child or a criminal. Saying either that I am not old enough to know what I am doing and must be punished for doing it, or that I am wrong to think that way at all. Punishment is a very dangerous tool to use because it is fundamentally condescending.&lt;br /&gt;&lt;br /&gt;Rails is David's baby, so he can do whatever he wants to it, and that is fine, but to treat a seasoned professional as a child only goes so far in my book. Some might argue that it is for the greater good... that it makes people who don't know what they are doing write better code, keeps people in their place. First of all, the people who end up being punished the most are the ones who want to push the envelope--a beginner is never going to try to add a keyword to the find method. Second of all, I don't want to give up my work productivity for the productivity of those who do not know what they are doing, I want a tool that works best for me. Every time I run into "opinionated software" in Rails, it makes the back of my ears burn reminding me of how much I can't wait to find, start, or help the next generation of highly productive web development software.&lt;br /&gt;&lt;br /&gt;Opinionated software is fine until you want to do interesting, new, and innovative things with ease. I am not interested in being treated like a child or a criminal for doing so, which means those opinions which David holds most dear are the ones that will eventually drive out the people that Rails initially attracted... the hackers, the innovators, the bleeding edge developers. Give us freedom or give us another tool that provides freedom.&lt;br /&gt;&lt;br /&gt;As a side note, apparently I may have been the first but certainly not the last to complain about the particular form of syntactic vinegar presented with validate_find_options because I see now that they ended up abstracting it and you can now add accepted keys by modifying the VALID_FIND_OPTIONS array. If you would like to see my failed attempt over a year ago to add this feature, check out &lt;a href="http://dev.rubyonrails.org/ticket/2836"&gt;this ticket&lt;/a&gt;.&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href="http://www.loudthinking.com/arc/000601.html"&gt;&lt;/a&gt;
&lt;p&gt;&lt;map name="google_ad_map_7SFf2H.Kmpau2yfu6cq1doK9C9g_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/7SFf2H.Kmpau2yfu6cq1doK9C9g_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_7SFf2H.Kmpau2yfu6cq1doK9C9g_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=7SFf2H.Kmpau2yfu6cq1doK9C9g_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F11%2Ffatal-flaw-in-opinionated-software.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/48855205/fatal-flaw-in-opinionated-software.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/3756214621470142654" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/3756214621470142654" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/11/fatal-flaw-in-opinionated-software.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-116301444016416505</id><published>2006-11-08T11:17:00.000-08:00</published><updated>2006-11-13T11:15:04.593-08:00</updated><title type="text">Functional Programming in Ruby</title><content type="html">In Ruby, iteration is done mainly functionally with methods like each and map. We call this type of iteration functional because we are passing a function to be called on each item in the collection.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;[1,2,3].each { |item| puts item + 1 }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;In this example. the function being passed is &lt;code&gt;{ |item| puts item + 1 }&lt;/code&gt;. In fact!&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;print_function = lambda { |item| puts item + 1 }&lt;br /&gt;[1,2,3].each &amp;print_function&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Accomplishes the exact same behavior.&lt;br /&gt;&lt;br /&gt;This is very much from the functional programing paradigm. Now, one thing that I can not stand to see in Ruby code is this.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;def convert(old)&lt;br /&gt;  new = Array.new&lt;br /&gt;  old.each do |item|&lt;br /&gt;    new &lt;&lt; transform(item)&lt;br /&gt;  end&lt;br /&gt;  new&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;The first hint that there is something wrong is the very odd call to return the &lt;code&gt;new&lt;/code&gt; variable at the end of the &lt;code&gt;convert&lt;/code&gt; method. It seems odd and awkward, and that is a hint that you are working against the grain. Here is how it should look.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;def convert(old)&lt;br /&gt;  old.map { |item| transform(item) }&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Or alternatively:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;def convert(old)&lt;br /&gt;  old.map &amp;method(:transform)&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Notice how clean and beautiful this is. We are working with the grain of functional programming here. Not only that, but there is less to debug, less to maintain and it takes less time to grok what is going on.&lt;br /&gt;&lt;br /&gt;If you want to learn more about the functional programming roots of Ruby, I recommend learning OCaml, I am really enjoying it.
&lt;p&gt;&lt;map name="google_ad_map_sehEGxQs4g9aAQa3l3zaOpXhhdc_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/sehEGxQs4g9aAQa3l3zaOpXhhdc_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_sehEGxQs4g9aAQa3l3zaOpXhhdc_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=sehEGxQs4g9aAQa3l3zaOpXhhdc_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F11%2Ffunctional-programming-in-ruby.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/46752053/functional-programming-in-ruby.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/116301444016416505" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/116301444016416505" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/11/functional-programming-in-ruby.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115822316926783454</id><published>2006-09-14T01:33:00.000-07:00</published><updated>2006-11-13T11:15:04.313-08:00</updated><title type="text">How to Learn to Program: From PHP to Lisp in 4 easy steps</title><content type="html">I taught myself how to program. Having gone through a progression of programming languages, I have found patterns that help me piggy back into more and more interesting types of programming. I started with PHP, moved to object-oriented PHP, and moved to a much cleaner and powerful Ruby. Once you learn Ruby, you are introduced with ideas like iteration by defining a block that is called for every item in a collection. If you like those ideas, you are going to love OCaml. Once you grok OCaml, Lisp becomes nearly second nature. I suggest that if you are in the PHP world and want to flex your muscles, try this progression. One language a year and you should be a Lisp guru in 4 years.
&lt;p&gt;&lt;map name="google_ad_map_IeiEBOdK0PTOAiidz4khTyrCpDA_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/IeiEBOdK0PTOAiidz4khTyrCpDA_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_IeiEBOdK0PTOAiidz4khTyrCpDA_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=IeiEBOdK0PTOAiidz4khTyrCpDA_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F09%2Fhow-to-learn-to-program-from-php-to.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/22146870/how-to-learn-to-program-from-php-to.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115822316926783454" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115822316926783454" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/09/how-to-learn-to-program-from-php-to.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115681002959623804</id><published>2006-08-28T16:55:00.000-07:00</published><updated>2006-11-13T11:15:04.037-08:00</updated><title type="text">How I processed a log file 20x SLOWER than before</title><content type="html">Sometimes you have to sit back and laugh at yourself. Having recently written Starfish to help speed up slow tasks,  I tried to find as many uses as I could for it. At MOG we have to parse huge log files so I thought I would be clever and try to use Starfish for the task. After running it for a while, I looked at the stats only to find that it had been processing my file 20x slower than it would have without distributing it. At first I was puzzled, until I realized a very important thing about distributing processes. You have to make sure that the task you distribute takes longer than the distribution process.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;if overhead_time &gt; processing_time then puts "Don't use Starfish" end&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;It turns out that I could process 10,000 lines of the log in about a second... so to send each one of those lines over the network to have them processed was just silly. Even sending 10,000 lines at a time is relatively unnecessary.&lt;br /&gt;&lt;br /&gt;I share this story so that you might not make the same mistake that I did. However I realized that Starfish can know when the overhead makes it not worth the trouble, I can actually warn people using Starfish when it is and is not a good use of resources. I will be adding this to the next release which shall come out shortly.
&lt;p&gt;&lt;map name="google_ad_map_dEF3vAi06PX136sVPBUvmNgrsrc_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/dEF3vAi06PX136sVPBUvmNgrsrc_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_dEF3vAi06PX136sVPBUvmNgrsrc_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=dEF3vAi06PX136sVPBUvmNgrsrc_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F08%2Fhow-i-processed-log-file-20x-slower.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/17145204/how-i-processed-log-file-20x-slower.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115681002959623804" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115681002959623804" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/08/how-i-processed-log-file-20x-slower.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115639459832224389</id><published>2006-08-23T21:09:00.000-07:00</published><updated>2006-11-13T11:15:03.741-08:00</updated><title type="text">Title Match of the Century: Speed of Development vs. Speed of Computation</title><content type="html">It is entertaining to read the comments people have about Starfish over on &lt;a href="http://programming.reddit.com/info/e1nk/comments"&gt;Reddit&lt;/a&gt;:&lt;br /&gt;&lt;blockquote&gt;If your task is intensive enough to warrant parallelization, it is intensive enough to warrant investigating faster languages. Ruby is good for a lot of things, but if my choice is between throwing more processors at the problem or finding a better solution I will go for the better solution every time.&lt;/blockquote&gt;&lt;br /&gt;Interesting point, not that he is right, but what he omits gives me pause. The vast majority of the comments where people talking about Ruby being 1000 times slower than their language, but they give no consideration at all to the most striking aspect of Starfish (in my opinion): I can do relatively advanced distributed programming in 6 lines of code.&lt;br /&gt;&lt;br /&gt;I'll say it again because it is important. 6 lines of code.&lt;br /&gt;&lt;br /&gt;With hardly more than a flick of my wrist, I can parallelize a task and get performance gains of 10, 20, 30 times, whatever I need. In less than a minute, I can write code that will go through a 10Gb log file grepping for a string and parsing that information, collecting that information and wait for new lines to process on demand, in a distributed system that can work over N machines.&lt;br /&gt;&lt;br /&gt;I have written much simpler processes in faster languages like C and it takes me hours and hours, not only for writing the hundreds of lines of code but for debugging the darn thing. If I was tasked with creating a distributed log parser in C that did something non-trivial with each line of the log, it could take me a week and it still wouldn't be right.&lt;br /&gt;&lt;br /&gt;I work at startups. I don't work for banks, I don't work for Microsoft, I don't work for enterprise. Can I, as a head programmer at a startup, afford over 80 hours of my time writing a log parser in C because it could be 1000 times faster? Not if my startup wants to succeed. Can Microsoft afford to have one of its tens of thousands of programmers spend the time to do that? Of course.&lt;br /&gt;&lt;br /&gt;Starfish can and does, on a daily basis, parallelize and speed up what would have otherwise been a slower process. It does so with almost no code.&lt;br /&gt;&lt;br /&gt;A few minutes and N times faster than a regular ruby script, or a few weeks and N times faster than a regular ruby script. I know which I choose, and it works extremely well for us. I am always a fan of the right tool for the right purpose. I know that Starfish is not always the right tool, but it is amazing how quickly people discount a tool without considering all of the issues involved. It is not always about processing power. Man hours saved can be much more valuable than a few extra orders of magnitude in processor power.
&lt;p&gt;&lt;map name="google_ad_map_MJwomwdR3iylUcV7sbx-gsWoblI_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/MJwomwdR3iylUcV7sbx-gsWoblI_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_MJwomwdR3iylUcV7sbx-gsWoblI_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=MJwomwdR3iylUcV7sbx-gsWoblI_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F08%2Ftitle-match-of-century-speed-of.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/15822315/title-match-of-century-speed-of.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115639459832224389" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115639459832224389" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/08/title-match-of-century-speed-of.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115636115971477533</id><published>2006-08-23T12:15:00.000-07:00</published><updated>2006-11-13T11:15:03.434-08:00</updated><title type="text">More Advanced Starfish Feature</title><content type="html">I promised you in &lt;a href="http://tech.rufy.com/2006/08/dynamically-add-methods-to-classes.html"&gt;Dynamically Add Methods to Classes Through their Objects in Ruby&lt;/a&gt; that there was a good use for that idea coming up. The time has come to show you how to use it.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;server do |map_reduce|&lt;br /&gt;  map_reduce.type = File&lt;br /&gt;  map_reduce.input = "some_file_name.txt"&lt;br /&gt;&lt;br /&gt;  map_reduce.process = lambda do |text|&lt;br /&gt;    do_something_on_the_server(text)&lt;br /&gt;  end&lt;br /&gt;&lt;br /&gt;  map_reduce.finished = lambda do&lt;br /&gt;    do_something_when_the_collection_is_totally_processed()&lt;br /&gt;  end&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;client do |line|&lt;br /&gt;  if line =~ /some_regular_expression/&lt;br /&gt;    server.process($1)&lt;br /&gt;  end&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;Notice how I am dynamically adding methods to map_reduce in the server declaration. I define the process and finished methods. The process method is called from the client via server.process and the finished method is called when the collection has been fully processed.&lt;br /&gt;&lt;br /&gt;Astute readers will notice that being able to dynamically add server side helper methods does a non-distribtued version of reduce (from MapReduce), which is good enough for many real world situations. Enjoy!
&lt;p&gt;&lt;map name="google_ad_map_SrHxqUf.iOgsqcaklLu17YFOHEg_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/SrHxqUf.iOgsqcaklLu17YFOHEg_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_SrHxqUf.iOgsqcaklLu17YFOHEg_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=SrHxqUf.iOgsqcaklLu17YFOHEg_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F08%2Fmore-advanced-starfish-feature.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/15715458/more-advanced-starfish-feature.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115636115971477533" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115636115971477533" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/08/more-advanced-starfish-feature.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115628350977339988</id><published>2006-08-22T14:45:00.000-07:00</published><updated>2006-11-13T11:15:03.217-08:00</updated><title type="text">Starfish is MapReduce for Ruby</title><content type="html">MapReduce and CORBA are huge honking power drills, Starfish is a nice little screw driver. I call Starfish the MapReduce of Ruby because they both do the same task: screw.&lt;br /&gt;&lt;br /&gt;I am trying to build the simplest to use, easiest to setup, and fastest to enjoy screw driver on earth. People who ridicule Starfish for its simplicity and lack of features are inadvertently praising me for succeeding at the goal I set for myself. Therefore, ridiculers, I thank you.
&lt;p&gt;&lt;map name="google_ad_map_N-B7LXdyJEvDBrw1vFEr0JheTTU_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/N-B7LXdyJEvDBrw1vFEr0JheTTU_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_N-B7LXdyJEvDBrw1vFEr0JheTTU_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=N-B7LXdyJEvDBrw1vFEr0JheTTU_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F08%2Fstarfish-is-mapreduce-for-ruby.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/15487693/starfish-is-mapreduce-for-ruby.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115628350977339988" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115628350977339988" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/08/starfish-is-mapreduce-for-ruby.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115623509032522110</id><published>2006-08-22T01:14:00.000-07:00</published><updated>2006-11-13T11:15:02.908-08:00</updated><title type="text">How I sent emails 10x faster than before</title><content type="html">Like many startups, at &lt;a href="http://mog.com/"&gt;MOG&lt;/a&gt; we send out regular updates to our users with news and information. As our user base expands, sending this email takes more and more time. Even though the call to deliver the mail only puts it in the sendmail queue, it can take a chunk of time to do so with so many users.&lt;br /&gt;&lt;br /&gt;When I demoed Starfish to people, the common response was: that's great, I wish I had a use for it, I wish I had a DB source big enough to use. Well here is one, albeit not mission critical but still damn cool, of the ways we use Starfish.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;require 'config/environment'&lt;br /&gt;require 'user'&lt;br /&gt;require 'notifier'&lt;br /&gt;&lt;br /&gt;server do |map_reduce|&lt;br /&gt;  map_reduce.type = User&lt;br /&gt;  map_reduce.conditions = "opt_out = 0"&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;client do |user|&lt;br /&gt;  Notifier.deliver_email(user)&lt;br /&gt;end&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;This tiny amount of code with next to nothing that needs to be memorized and takes 30 seconds to write down can potentially save you hours in deliver time. Even running 10 clients at once on the SAME MACHINE gave us nearly 10x the speed it would have taken serially. This was not mission critical, but gives you a good sense of ways to apply Starfish to mission critical applications.
&lt;p&gt;&lt;map name="google_ad_map_ib1jNkv69GIwJi9bs3nyT0OucY4_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/ib1jNkv69GIwJi9bs3nyT0OucY4_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_ib1jNkv69GIwJi9bs3nyT0OucY4_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=ib1jNkv69GIwJi9bs3nyT0OucY4_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F08%2Fhow-i-sent-emails-10x-faster-than.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/15336572/how-i-sent-emails-10x-faster-than.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115623509032522110" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115623509032522110" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/08/how-i-sent-emails-10x-faster-than.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115577469792752740</id><published>2006-08-16T17:28:00.000-07:00</published><updated>2006-11-13T11:15:02.631-08:00</updated><title type="text">MapReduce for Ruby: Ridiculously Easy Distributed Programming</title><content type="html">&lt;div style="float:right; text-align: right;clear: both;font-size: 10px;padding-bottom: 10px;"&gt;&lt;br /&gt;    &lt;a title="Submit To Digg" href="http://digg.com/programming/MapReduce_for_Ruby_Ridiculously_Easy_Distributed_Programming" &gt;&lt;img src="http://www.answermysearches.com/wp-content/themes/cleanbreeze/images/digg.gif" alt="Digg" border="0"&gt;&lt;/a&gt;&lt;br /&gt;    &lt;a title="Save To del.icio.us" href="http://del.icio.us/post?url=http://tech.rufy.com/2006/08/mapreduce-for-ruby-ridiculously-easy.html;title=MapReduce+for+Ruby+--+Ridiculously+Easy+Distributed+Programming"&gt;&lt;img src="http://www.answermysearches.com/wp-content/themes/cleanbreeze/images/delicious.gif" alt="del.icio.us" border="0"&gt;&lt;/a&gt;&lt;br /&gt;    &lt;a title="Save To FURL" href="http://www.furl.net/storeIt.jsp?t=MapReduce+for+Ruby+--+Ridiculously+Easy+Distributed+Programming;u=http://tech.rufy.com/2006/08/mapreduce-for-ruby-ridiculously-easy.html" &gt;&lt;img src="http://www.answermysearches.com/wp-content/themes/cleanbreeze/images/frul.gif" alt="FURL" border="0"&gt;&lt;/a&gt;&lt;br /&gt;    &lt;a title="Save to Yahoo! My Web 2.0" href="http://myweb2.search.yahoo.com/myresults/bookmarklet?t=MapReduce+for+Ruby+--+Ridiculously+Easy+Distributed+Programming;u=http://tech.rufy.com/2006/08/mapreduce-for-ruby-ridiculously-easy.html"&gt;&lt;img src="http://www.answermysearches.com/wp-content/themes/cleanbreeze/images/yahoomyweb.jpg" alt="Yahoo! My Web 2.0" border="0"&gt;&lt;/a&gt;&lt;br /&gt;    &lt;a title="Save to Reddit" href="http://reddit.com/submit?url=http://tech.rufy.com/2006/08/mapreduce-for-ruby-ridiculously-easy.html;title=MapReduce+for+Ruby+--+Ridiculously+Easy+Distributed+Programming" &gt;&lt;img src="http://www.answermysearches.com/wp-content/themes/cleanbreeze/images/reddit_btn.gif" alt="Reddit" border="0"&gt;&lt;/a&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;I am very happy to announce that Google's MapReduce is now available for Ruby (via &lt;code&gt;gem install starfish&lt;/code&gt;). MapReduce is the technique used by Google to do monstrous distributed programming over 30 terabyte files. I have been &lt;a href="http://labs.google.com/papers/mapreduce.html"&gt;reading about&lt;/a&gt; MapReduce recently and thought that it was very exciting for Google to have laid out the ideas that ran Google. I also wondered how they could be applied to everyday applications.&lt;br /&gt;&lt;br /&gt;Recently, I gave a talk on &lt;a href="http://rufy.com/distributed-programming/"&gt;Ridiculously easy ways to distribute processor intensive tasks using Rinda and DRb&lt;/a&gt;. This talk came from my work with Rinda recently at &lt;a href="http://mog.com/"&gt;MOG&lt;/a&gt;. We use distributed programming to handle real-time processor intensive needs for over 1 million requests a day. We also use it to make large changes or clean up our database. I realized that the plumbing I wrote in Rinda to accomplish these tasks could be abstracted and easily conform to the MapReduce technique.&lt;br /&gt;&lt;br /&gt;Before I move on, I will provide a little more background of Google's MapReduce. MapReduce is a C++ library written by Google. There are about 12 MapReduce programs used to create the inverted index of the www that Google uses for searching. The term MapReduce itself refers to map and reduce functions. Joel recently &lt;a href="http://www.joelonsoftware.com/items/2006/08/01.html"&gt;wrote an article&lt;/a&gt; that explains what map a reduce do, so I will refrain from repeating him. One of the parts Joel unfortunately messed up on was this sentence though:&lt;br /&gt;&lt;blockquote&gt;&lt;br /&gt;[...] you only have to get one supergenius to write the hard code to run map and reduce on a global massively parallel array of computers, and all the old code that used to work fine when you just ran a loop still works only it's a zillion times faster which means it can be used to tackle huge problems in an instant [...]&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;Google, nor anyone I know, has written a map function that will "replace" your existing calls to map, like a plugin. In fact, here is some real world MapReduce example code that is used to provide a word count on an arbitrarily sized document:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;#include "mapreduce/mapreduce.h" &lt;br /&gt;&lt;br /&gt;// User's map function &lt;br /&gt;class WordCounter : public Mapper { &lt;br /&gt;  public: &lt;br /&gt;  virtual void Map(const MapInput&amp; input) { &lt;br /&gt;    const string&amp; text = input.value(); &lt;br /&gt;    const int n = text.size(); &lt;br /&gt;    for (int i = 0; i &lt; n; ) { &lt;br /&gt;      // Skip past leading whitespace &lt;br /&gt;      while ((i &lt; n) &amp;&amp; isspace(text[i])) &lt;br /&gt;        i++; &lt;br /&gt;      // Find word end &lt;br /&gt;      int start = i; &lt;br /&gt;      while ((i &lt; n) &amp;&amp; !isspace(text[i])) &lt;br /&gt;        i++; &lt;br /&gt;      if (start &lt; i) &lt;br /&gt;        Emit(text.substr(start,i-start),"1"); &lt;br /&gt;    } &lt;br /&gt;  } &lt;br /&gt;};&lt;br /&gt;&lt;br /&gt;REGISTER_MAPPER(WordCounter); &lt;br /&gt;&lt;br /&gt;// User's reduce function &lt;br /&gt;class Adder : public Reducer { &lt;br /&gt;  virtual void Reduce(ReduceInput* input) { &lt;br /&gt;    // Iterate over all entries with the &lt;br /&gt;    // same key and add the values &lt;br /&gt;    int64 value = 0; &lt;br /&gt;    while (!input-&gt;done()) { &lt;br /&gt;      value += StringToInt(input-&gt;value()); &lt;br /&gt;      input-&gt;NextValue(); &lt;br /&gt;    } &lt;br /&gt;    // Emit sum for input-&gt;key() &lt;br /&gt;    Emit(IntToString(value)); &lt;br /&gt;  } &lt;br /&gt;}; &lt;br /&gt;&lt;br /&gt;REGISTER_REDUCER(Adder); &lt;br /&gt;&lt;br /&gt;int main(int argc, char** argv) { &lt;br /&gt;  ParseCommandLineFlags(argc, argv); &lt;br /&gt;  MapReduceSpecification spec; &lt;br /&gt;  &lt;br /&gt;  // Store list of input files into "spec" &lt;br /&gt;  for (int i = 1; i &lt; argc; i++) { &lt;br /&gt;    MapReduceInput* input = spec.add_input(); &lt;br /&gt;    input-&gt;set_format("text"); &lt;br /&gt;    input-&gt;set_filepattern(argv[i]); &lt;br /&gt;    input-&gt;set_mapper_class("WordCounter"); &lt;br /&gt;  } &lt;br /&gt;  &lt;br /&gt;  // Specify the output files: &lt;br /&gt;  // /gfs/test/freq-00000-of-00100 &lt;br /&gt;  // /gfs/test/freq-00001-of-00100 &lt;br /&gt;  // ... &lt;br /&gt;  MapReduceOutput* out = spec.output(); &lt;br /&gt;  out-&gt;set_filebase("/gfs/test/freq"); &lt;br /&gt;  out-&gt;set_num_tasks(100); &lt;br /&gt;  out-&gt;set_format("text"); &lt;br /&gt;  out-&gt;set_reducer_class("Adder"); &lt;br /&gt;  &lt;br /&gt;  // Optional: do partial sums within map &lt;br /&gt;  // tasks to save network bandwidth &lt;br /&gt;  out-&gt;set_combiner_class("Adder"); &lt;br /&gt;  &lt;br /&gt;  // Tuning parameters: use at most 2000 &lt;br /&gt;  // machines and 100 MB of memory per task &lt;br /&gt;  spec.set_machines(2000); &lt;br /&gt;  spec.set_map_megabytes(100); &lt;br /&gt;  spec.set_reduce_megabytes(100); &lt;br /&gt;  &lt;br /&gt;  // Now run it &lt;br /&gt;  MapReduceResult result; &lt;br /&gt;  &lt;br /&gt;  if (!MapReduce(spec, &amp;result)) abort(); &lt;br /&gt;  // Done: 'result' structure contains info &lt;br /&gt;  // about counters, time taken, number of &lt;br /&gt;  // machines used, etc. &lt;br /&gt;  return 0; &lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;MapReduce takes a large data set (in this case a large file), divides the file into many different pieces, and lets 2000 machines each count words and aggregate statistics for a small part of that file, aggregating the result together in the end.&lt;br /&gt;&lt;br /&gt;One of the parts that stood out to me is how there is a clear separation of how to do the call to map and how to do the call to reduce. The other part is all the set calls like &lt;code&gt;spec.set_machines(2000);&lt;/code&gt;. I love the simplicity: you tell the system how to map, you tell it how to reduce, you set some options, and run it. Notice specifically that you are not writing network code... this is obviously a very network intensive task, but that is all hidden behind &lt;code&gt;#include "mapreduce/mapreduce.h"&lt;/code&gt;. This is much like Rinda for Ruby where you do not have to write any network code to distribute objects over the network. You do however have to learn an API to use either Rinda or DRb. MapReduce feels much less like an API and more like a layout, a template that you fill in.&lt;br /&gt;&lt;br /&gt;I took the lessons from MapReduce, injected my background of Ruby and came up with what I call &lt;a href="http://rufy.com/starfish/doc/"&gt;Starfish&lt;/a&gt;. The backend implementation of Starfish is vastly different than Google's MapReduce: MapReduce is highly optimized for speed and best use of 2000 computer resources at a time, Starfish is highly optimized for speed of development and ease of use. That said, the goal of Starfish is the same as MapReduce.&lt;br /&gt;&lt;br /&gt;Starfish takes a large data set (in this case a database), divides the table into many different sections, and lets machines each do work on sections of the database in parallel, aggregating the result together in the end.&lt;br /&gt;&lt;br /&gt;Here is some example code:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;class Item &lt; ActiveRecord::Base; end&lt;br /&gt;&lt;br /&gt;server do |map_reduce|&lt;br /&gt;  map_reduce.type = Item&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;client do |item|&lt;br /&gt;  logger.info item.some_processor_intensive_task&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;/code&gt;&lt;br /&gt;You will notice a few major differences quite quickly. First, you do not need to require any libraries, if this file was called item.rb you would run &lt;pre&gt;starfish item.rb&lt;/pre&gt; on the command line on as many servers as you want and it will do everything it needed to start working and distributing the work. Next, you do not specify map and reduce functions, rather you specify a client and a server. I loved the simplicity and clarity of defining the two most important parts to Google's MapReduce, but in Ruby it would have been silly to do so because it is not C++ and mapping and reducing is too easy. So I gave it some thought and came up with what I thought was the most important part of distributed programming: what does the server serve and how do the client process the served objects.&lt;br /&gt;&lt;br /&gt;Aside from the differences, you will notice the similarity, in the server you are setting options, setting &lt;code&gt; map_reduce.type = Item&lt;/code&gt; much like &lt;code&gt;input-&gt;set_format("text");&lt;/code&gt; in MapReduce. In the near future, you will be able to tell Starfish that the type is File and let Starfish process files the same way we saw MapReduce do it in the example. Also, logger.info sends some information back to the server that logs it to a file much the same way that &lt;code&gt;out-&gt;set_filebase("/gfs/test/freq");&lt;/code&gt; works.&lt;br /&gt;&lt;br /&gt;However the biggest major difference is that Starfish is open-source and easy to use. Performing distributed tasks is now a ridiculously easy reality for programmers that may not have been steeped enough in CORBA or some other library to accomplish before.&lt;br /&gt;&lt;br /&gt;I hope that you find this library helpful, please tell me how you use it and how I can make it work better for you. There any many options I didn't cover, so if you do use it, please &lt;a href="http://rufy.com/starfish/doc/"&gt;read the documentation&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I wrote an example of &lt;a href="http://tech.rufy.com/2006/08/how-i-sent-emails-10x-faster-than.html"&gt;how I sent emails 10x faster than before&lt;/a&gt; using Starfish.
&lt;p&gt;&lt;map name="google_ad_map_FEJ7UoE6C.wzKXaQvGnomnhjxYU_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/FEJ7UoE6C.wzKXaQvGnomnhjxYU_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_FEJ7UoE6C.wzKXaQvGnomnhjxYU_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=FEJ7UoE6C.wzKXaQvGnomnhjxYU_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F08%2Fmapreduce-for-ruby-ridiculously-easy.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/14269221/mapreduce-for-ruby-ridiculously-easy.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115577469792752740" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115577469792752740" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/08/mapreduce-for-ruby-ridiculously-easy.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115531287346650702</id><published>2006-08-11T09:11:00.000-07:00</published><updated>2006-11-13T11:15:02.166-08:00</updated><title type="text">Ruby Cookbook PDF</title><content type="html">I have some exciting news to share with you all, the Ruby Cookbook is now available for half price in PDF form &lt;a href="http://www.oreilly.com/catalog/rubyckbk/?CMP=ILC-H2K675675382&amp;ATT=rubyckbk"&gt;from O'Reilly&lt;/a&gt;. That's right, you can now download and search the cookbook for all your recipes and needs. I usually don't prefer PDF books, but if I hadn't written it, the cookbook certainly would be an exception since each recipe is about a page or two in length. I think the PDF version of the cookbook makes more sense in PDF version than some other technical books. Do you guys prefer hard copies or PDF copies?
&lt;p&gt;&lt;map name="google_ad_map_GOp1Y0TwpfMub8zRjN5Fc54l5WE_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/GOp1Y0TwpfMub8zRjN5Fc54l5WE_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_GOp1Y0TwpfMub8zRjN5Fc54l5WE_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=GOp1Y0TwpfMub8zRjN5Fc54l5WE_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F08%2Fruby-cookbook-pdf.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/11352964/ruby-cookbook-pdf.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115531287346650702" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115531287346650702" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/08/ruby-cookbook-pdf.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115467474469856050</id><published>2006-08-03T23:50:00.000-07:00</published><updated>2006-11-13T11:15:01.849-08:00</updated><title type="text">Dynamically Add Methods to Classes Through their Objects in Ruby</title><content type="html">Playing with the implementation of a new library I am working on called starfish (I will blog about it shortly), I came up with this fun little Ruby hack that makes Ruby seem more like a prototype-based language than it already does.&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;class Foo&lt;br /&gt;  def method_missing(name, *args)&lt;br /&gt;    if name.to_s =~ /(.*)=$/ &amp;&amp; args[0].is_a?(Proc)&lt;br /&gt;      self.class.instance_eval do&lt;br /&gt;        define_method($1, args[0])&lt;br /&gt;      end&lt;br /&gt;    else&lt;br /&gt;      super&lt;br /&gt;    end&lt;br /&gt;  end&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;f = Foo.new&lt;br /&gt;f.greet = lambda {|t| "Hello #{t}!"}&lt;br /&gt;f.greet "Lucas Carlson" # =&gt; Hello Lucas Carlson!&lt;br /&gt;&lt;br /&gt;j = Foo.new&lt;br /&gt;j.greet "World" # =&gt; Hello World!&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;Hope you enjoy it as much as I do and I can't wait to show you how I am using it!
&lt;p&gt;&lt;map name="google_ad_map_DBf-k1E87VNvgAUiFiH4LcpoLtc_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/DBf-k1E87VNvgAUiFiH4LcpoLtc_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_DBf-k1E87VNvgAUiFiH4LcpoLtc_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=DBf-k1E87VNvgAUiFiH4LcpoLtc_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F08%2Fdynamically-add-methods-to-classes.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/9122463/dynamically-add-methods-to-classes.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115467474469856050" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115467474469856050" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/08/dynamically-add-methods-to-classes.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115402561730243704</id><published>2006-07-27T11:34:00.000-07:00</published><updated>2006-11-13T11:15:01.328-08:00</updated><title type="text">Ridiculously easy ways to distribute processor intensive tasks using Rinda and DRb</title><content type="html">Here are the &lt;a href="http://rufy.com/distributed-programming/"&gt;slides&lt;/a&gt; for my FOSCON talk. Additionally, I wrote code during the talk which is also available. Run these in order to get it working:&lt;br /&gt;&lt;ol&gt;&lt;br /&gt;&lt;li&gt;ruby &lt;a href="http://rufy.com/rinda.rb"&gt;rinda.rb&lt;/a&gt;&lt;/li&gt;&lt;br /&gt;&lt;li&gt;ruby &lt;a href="http://rufy.com/prime_finder.rb"&gt;prime_finder.rb&lt;/a&gt;&lt;/li&gt;&lt;br /&gt;&lt;li&gt;ruby &lt;a href="http://rufy.com/prime_client.rb"&gt;prime_client.rb&lt;/a&gt;&lt;/li&gt;&lt;br /&gt;&lt;/ol&gt;
&lt;p&gt;&lt;map name="google_ad_map_JnVP2SfVVgsQViDd1txhGnvWMYM_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/JnVP2SfVVgsQViDd1txhGnvWMYM_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_JnVP2SfVVgsQViDd1txhGnvWMYM_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=JnVP2SfVVgsQViDd1txhGnvWMYM_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F07%2Fridiculously-easy-ways-to-distribute.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/6141496/ridiculously-easy-ways-to-distribute.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115402561730243704" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115402561730243704" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/07/ridiculously-easy-ways-to-distribute.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115358169564862415</id><published>2006-07-22T08:19:00.000-07:00</published><updated>2006-11-13T11:15:01.111-08:00</updated><title type="text">Codecamp Talk Slides</title><content type="html">&lt;a href="http://rufy.com/intro-rails/"&gt;Introduction to Ruby on Rails&lt;/a&gt;&lt;br /&gt;&lt;a href="http://rufy.com/meta-programming-rails/"&gt;An Exercise in Meta-Programming with Rails&lt;/a&gt;&lt;br /&gt;&lt;a href="http://rufy.com/cross-domain-ajax/"&gt;Using Cross-Domain AJAX Today&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;I'd love comments and feedback.
&lt;p&gt;&lt;map name="google_ad_map_23QNjhY3urYIB48HrxJQPxd0pQQ_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/23QNjhY3urYIB48HrxJQPxd0pQQ_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_23QNjhY3urYIB48HrxJQPxd0pQQ_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=23QNjhY3urYIB48HrxJQPxd0pQQ_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F07%2Fcodecamp-talk-slides.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/http%3A%2F%2Ftech.rufy.com%2F2006%2F07%2Fcodecamp-talk-slides.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115358169564862415" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115358169564862415" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/07/codecamp-talk-slides.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115342331731196363</id><published>2006-07-20T12:13:00.000-07:00</published><updated>2006-11-13T11:15:00.767-08:00</updated><title type="text">My Talking Schedule</title><content type="html">I am giving a number of talks in the next few weeks. If you like how I write, are going to be in Portland, and are so inclined to say hi, come by any of the following places.&lt;br /&gt;&lt;br /&gt;In two days, Saturday the 22nd, I will be giving 3 talks at &lt;a href="http://pdx.techevents.info/codecamp/2/default.aspx"&gt;Portland Code Camp&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;9:15-10:30am: Introduction to Ruby on Rails&lt;br /&gt;10:45-12:15am: An Exercise in Meta-Programming with Rails&lt;br /&gt;2:45-4:00pm: Using Cross-Domain AJAX Today&lt;br /&gt;&lt;br /&gt;Then at &lt;a href="http://conferences.oreillynet.com/os2006/"&gt;OSCON&lt;/a&gt; I will be doing a few events:&lt;br /&gt;&lt;br /&gt;12-1:30pm on Monday, July 24th: Book signing at the Powell's booth&lt;br /&gt;11:15-11:45am on Wednesday, July 26th: Best of the Ruby Cookbook talk at the O'Reilly booth&lt;br /&gt;&lt;br /&gt;I am also talking at &lt;a href="http://oscamp.org/FOSCON"&gt;FOSCON&lt;/a&gt; on Wednesday night:&lt;br /&gt;&lt;br /&gt;7:30 PM-??? on Wednesday, July 26th: Ridiculously easy ways to distribute processor intensive tasks using Rinda and DRb&lt;br /&gt;&lt;br /&gt;I hope to see you at any or all of the above events.
&lt;p&gt;&lt;map name="google_ad_map_0Qw5AdmJnU0v9HGQ8XOzP2JU6.4_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/0Qw5AdmJnU0v9HGQ8XOzP2JU6.4_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_0Qw5AdmJnU0v9HGQ8XOzP2JU6.4_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=0Qw5AdmJnU0v9HGQ8XOzP2JU6.4_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F07%2Fmy-talking-schedule.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/~r/rufytech/~3/http%3A%2F%2Ftech.rufy.com%2F2006%2F07%2Fmy-talking-schedule.html" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115342331731196363" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115342331731196363" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/07/my-talking-schedule.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115259502252689664</id><published>2006-07-10T22:03:00.000-07:00</published><updated>2006-11-13T11:15:00.364-08:00</updated><title type="text">Use or Force an Index with Rails</title><content type="html">I just found an ActiveRecord hint that is very useful and very undocumented. If you are working with a table who's indexes are sufficiently complex, MySQL will inevitably guess the wrong index at times. To counteract that in SQL, you write:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;SELECT * FROM alphas USE INDEX (some_index) WHERE betas = gamas;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Rails does not have a corresponding :use_index for find methods. However, it does have an un-documented :from option.&lt;br /&gt;&lt;pre&gt;&lt;code&gt;Alpha.find(:all, :from =&gt; "alphas USE INDEX (some_index)", :conditions =&gt; "betas = gamas")&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Keep this in the back of your mind if you are going to be working with complex database tables any time soon.
&lt;p&gt;&lt;map name="google_ad_map_7yF-YjbnxAW6Wq7WW90ckRVSwqU_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/7yF-YjbnxAW6Wq7WW90ckRVSwqU_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_7yF-YjbnxAW6Wq7WW90ckRVSwqU_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=7yF-YjbnxAW6Wq7WW90ckRVSwqU_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F07%2Fuse-or-force-index-with-rails.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=114" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115259502252689664" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115259502252689664" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/07/use-or-force-index-with-rails.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-115049019410298444</id><published>2006-06-16T13:32:00.000-07:00</published><updated>2006-11-13T11:15:00.135-08:00</updated><title type="text">Caching Computations During Request Processing Even Better</title><content type="html">In a &lt;a href="http://www.infoq.com/articles/Rails-Performance"&gt;recent post&lt;/a&gt; by Stefan Kaes from &lt;a href="http://railsexpress.de/blog/"&gt;RailsExpress&lt;/a&gt;, Stefan mentions a method I have often used for speeding things up a bit.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;module M&lt;br /&gt;  def get_data_for(request)&lt;br /&gt;    @cached_data_for_request ||=&lt;br /&gt;      begin&lt;br /&gt;        expensive computation depending on request returning data&lt;br /&gt;      end&lt;br /&gt;  end&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;However the problem with this method is that if get_data_for(request) returns nil, it will keep performing the request over and over again. Here is a slightly improved version if you don't always expect to get a return value.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;module M&lt;br /&gt;  def get_data_for(request)&lt;br /&gt;    unless @cached_data_found&lt;br /&gt;      @cached_data_found = true&lt;br /&gt;      @cached_data_for_request =&lt;br /&gt;        begin&lt;br /&gt;          expensive computation depending on request returning data&lt;br /&gt;        end&lt;br /&gt;     end&lt;br /&gt;     @cached_data_for_request&lt;br /&gt;  end&lt;br /&gt;end&lt;br /&gt;&lt;/pre&gt;
&lt;p&gt;&lt;map name="google_ad_map_.hl1JKHzLtcdalipY2Lu11Fis9g_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/.hl1JKHzLtcdalipY2Lu11Fis9g_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_.hl1JKHzLtcdalipY2Lu11Fis9g_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=.hl1JKHzLtcdalipY2Lu11Fis9g_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F06%2Fcaching-computations-during-request.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=113" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115049019410298444" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/115049019410298444" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/06/caching-computations-during-request.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-114984134733173726</id><published>2006-06-09T01:22:00.000-07:00</published><updated>2006-11-13T11:14:59.833-08:00</updated><title type="text">Portland Code Camp 2.0</title><content type="html">&lt;p class="mobile-post"&gt;Aside from the fact that this year, Portland Code Camp is not being  &lt;br /&gt;held in Portland, I am very excited. Especially since I am slated to  &lt;br /&gt;give &lt;a href="http://pdx.techevents.info/codecamp/2/sessions.aspx?by=category&amp;amp;tag=Ruby"&gt;3 talks&lt;/a&gt; surrounding Rails.&lt;/p&gt;&lt;p class="mobile-post"&gt;&lt;ul&gt;&lt;li&gt;Introduction to Ruby on Rails&lt;br /&gt;&lt;li&gt;An Exercise in Meta-Programming with Rails&lt;br /&gt;&lt;li&gt;Using Cross-Domain Ajax Today&lt;/ul&gt;&lt;/p&gt;&lt;p class="mobile-post"&gt;Come show your Rails support on July 22 &amp;amp; 23 at WSU in Vancouver, WA and say hi to me, I would love to meet you.&lt;/p&gt;
&lt;p&gt;&lt;map name="google_ad_map_0qjDZH2u48yKtcVROOVfyrFOuOI_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/0qjDZH2u48yKtcVROOVfyrFOuOI_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_0qjDZH2u48yKtcVROOVfyrFOuOI_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=0qjDZH2u48yKtcVROOVfyrFOuOI_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F06%2Fportland-code-camp-20.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=112" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114984134733173726" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114984134733173726" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/06/portland-code-camp-20.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-114983941136518091</id><published>2006-06-09T00:50:00.000-07:00</published><updated>2006-11-13T11:14:59.141-08:00</updated><title type="text">Ruby Cookbook Announcement</title><content type="html">&lt;p class="mobile-post"&gt;The &lt;a href="http://www.oreilly.com/catalog/rubyckbk/"&gt;Ruby Cookbook&lt;/a&gt; written by Leonard Richardson, myself, and about 40 contributors  is complete and will be out in time for OSCON 2006. I am extremely  pleased how it turned out and can't wait to share it with you. Right  now, the website states the book as being 656 pages, however I would  like to announce that this beast clocks in at nearly 900 pages! You  read that right. It will be the largest single printed resource for  Ruby on the market today. Pre-order now to get the earliest copies or  check out the rough cuts version if you can't wait that long.&lt;/p&gt;
&lt;p&gt;&lt;map name="google_ad_map_24-IFemSuS2jgQ5eC4fyeyKcvzM_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/24-IFemSuS2jgQ5eC4fyeyKcvzM_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_24-IFemSuS2jgQ5eC4fyeyKcvzM_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=24-IFemSuS2jgQ5eC4fyeyKcvzM_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F06%2Fruby-cookbook-announcement.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=110" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114983941136518091" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114983941136518091" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/06/ruby-cookbook-announcement.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-114983879262905222</id><published>2006-06-09T00:39:00.000-07:00</published><updated>2006-11-13T11:14:58.854-08:00</updated><title type="text">Continuations with Ruby</title><content type="html">&lt;p class="mobile-post"&gt;I have been diving into continuations a bit lately and would like to share with you some of my findings. First of all, allow us to let the code speak for itself for a moment. Fire up irb and copy the following in:&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;class Foo&lt;br /&gt;   def bar&lt;br /&gt;     catch :break do&lt;br /&gt;       puts "starting..."&lt;br /&gt;       callcc do |@continuation|&lt;br /&gt;         puts "pausing..."&lt;br /&gt;         throw :break&lt;br /&gt;       end&lt;br /&gt;       puts "finished"&lt;br /&gt;     end&lt;br /&gt;   end&lt;br /&gt;   def continue&lt;br /&gt;     @continuation.call&lt;br /&gt;     puts "this puts will not ever be executed"&lt;br /&gt;   end&lt;br /&gt;end&lt;/p&gt;&lt;p class="mobile-post"&gt;f = Foo.new&lt;br /&gt;f.bar&lt;br /&gt;# =&amp;gt; starting...&lt;br /&gt;# =&amp;gt; pausing...&lt;br /&gt;f.continue&lt;br /&gt;# =&amp;gt; finished&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;You will notice a few things about this code. First is that callcc  &lt;br /&gt;takes a parameter but does not use it. Rather, that parameter  &lt;br /&gt;actually becomes a block in it of itself which is called in the  &lt;br /&gt;continue method. Next is that within the callcc block we catch a&lt;br /&gt;symbol. We do this specifically and only with the intent of stopping  &lt;br /&gt;the flow of the code. The final thing to notice is that as soon as you call the @continuation block, it sends you right back into the bar method to the point after the callcc block is made and continues along its merry way... it does not hop back over to the continue method when finished... it actually transfers into a whole new scope.&lt;/p&gt;&lt;p class="mobile-post"&gt;If this is new to you, chew on it for a while and enjoy. If this is  &lt;br /&gt;old hat, then I have more continuations cooking for you soon. To give  &lt;br /&gt;you a hint, there are plenty of ActiveRecord plugins out there but I  &lt;br /&gt;am thinking of building on of the first ActionController plugins. I  &lt;br /&gt;call it acts_as_continuation.&lt;/p&gt;
&lt;p&gt;&lt;map name="google_ad_map_rr0-LkutWOgni3BTXSwF5Yupk5o_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/rr0-LkutWOgni3BTXSwF5Yupk5o_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_rr0-LkutWOgni3BTXSwF5Yupk5o_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=rr0-LkutWOgni3BTXSwF5Yupk5o_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F06%2Fcontinuations-with-ruby.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=111" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114983879262905222" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114983879262905222" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/06/continuations-with-ruby.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-114983742543439766</id><published>2006-06-09T00:09:00.000-07:00</published><updated>2006-11-13T11:14:58.640-08:00</updated><title type="text">What Hapened to Technoblog?</title><content type="html">Good question. For those of you who may not have noticed, I have been down for about a month now. Why? Because &lt;a href="http://managed.com"&gt;Managed.com&lt;/a&gt; (my dedicated server provider) was recently purchased by &lt;a href="http://webhostplus.com/"&gt;Web Host Plus&lt;/a&gt;. The way they decided to deal with this move was by turning 7,000 people's servers off without any notice at all, ship them across the country with poor if any labeling, and throw away any servers they did not know what to do with. At least that is what Leonid Gudovich, the Director of Sales told me. My server was one of those that was thrown away. I have been in denial over the last month or so because I wanted to believe if they tried hard enough they would find it. I was wrong. They just couldn't care less. I emailed these people over and over, called them daily, left messages, did everything I could. They almost never responded to email and they never returned a phone call.&lt;br /&gt;&lt;br /&gt;Lesson learned: NEVER EVER EVER EVER go for the cheapest dedicated hosting you can find. It will cost you BIG time in the long run. If you are looking for something better, go with &lt;a href="http://ev1servers.net"&gt;ev1servers.net&lt;/a&gt; or &lt;a href="http://rackspace.com/"&gt;Rackspace&lt;/a&gt;. In the mean time I am going to try to put the pieces of my web presence back together from scattered backups. If any of you have full copies of my previous blog entries, I would kiss your feet if you sent them to me at lucas at rufy.com. I will post them as I receive them. Thanks for hanging in with me and not giving up, I promise to keep up with my blogging now that I have moved to &lt;a href="http://planetargon.com/"&gt;Planet Argon&lt;/a&gt; + &lt;a href="http://blogger.com"&gt;Blogger&lt;/a&gt; setup.
&lt;p&gt;&lt;map name="google_ad_map_fIHkM0r4BTSSiTLmRXfebf1Xj1A_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/fIHkM0r4BTSSiTLmRXfebf1Xj1A_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_fIHkM0r4BTSSiTLmRXfebf1Xj1A_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=fIHkM0r4BTSSiTLmRXfebf1Xj1A_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F06%2Fwhat-hapened-to-technoblog.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=108" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114983742543439766" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114983742543439766" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/06/what-hapened-to-technoblog.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-114983681607201942</id><published>2006-06-09T00:00:00.000-07:00</published><updated>2006-11-13T11:14:58.351-08:00</updated><title type="text">Ruby vs. Java: A matter of taste</title><content type="html">"Jesus reflected on his situation and felt irrepressible sadness. His tear-ducts filled to a point where they could hold no longer and had to be released."&lt;br /&gt;&lt;br /&gt;versus&lt;br /&gt;&lt;br /&gt;"Jesus wept."&lt;br /&gt;&lt;br /&gt;I prefer the later. My favorite author is Hemmingway and my favorite programming language is Ruby. My girlfriend hates Hemmingway, and that's fine. It is all a matter of taste.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.lightbody.net/~plightbo/archives/000144.html"&gt;A&lt;/a&gt; &lt;a href="http://www.loudthinking.com/arc/000400.html"&gt;lot&lt;/a&gt; of &lt;a href="http://rifers.org/blogs/gbevin/2005/3/18/blabla_tada_in_java"&gt;heated&lt;/a&gt; &lt;a href="http://weblog.rubyonrails.com/archives/2005/03/19/bla-bla-list-cloning-a-rails-app-in-rife/"&gt;debate&lt;/a&gt; is &lt;a href="http://rifers.org/blogs/gbevin/2005/3/19/revisting_a_rails_app_in_rife"&gt;going&lt;/a&gt; on between the Ruby on Rails camp and the Java camp. In those debates, the dreaded "lines of code" (LOC) comparison frequently shows up in the Ruby side, and the equally misguided response "lines of code mean nothing" statement frequently shows up in the Java side. Usually, when there are arguments of this sort, the truth lies somewhere in the middle and emotions tend to make the arguments lean a little this way or a little that way. Here I will make a level-headed attempt to sketch both sides of the argument and try to pull out a deeper root.&lt;br /&gt;&lt;br /&gt;Several times a week, the official Ruby on Rails weblog tends to post a story ala Apple's switch campaign where a deep rooted Java programmer "sees the light" and never wants to program in Java again. Many times, and by many people, the statement has been made that working in the Rails framework provides almost a 10x gain in productivity. Java people like to say that David (the creator of Rails) has brainwashed these people or that this is all hype [1]. Another typical response is that there is no such thing as 10x more productive than Java, that people have been claiming this for years and there is always a catch. In any case, these statements generally degenerate into the following arguments.&lt;br /&gt;&lt;h2&gt;&lt;br /&gt;LOC don't matter&lt;br /&gt;&lt;/h2&gt;&lt;br /&gt;You can't compare one language to another by lines of code. Look at Perl for example. Many people say that you can develop something quickly in few lines of code, but that you can never maintain it. There are much more important ways to compare languages: can it scale? is it enterprise?, is it maintainable?, how many programmers can I find to finish the job?, etc. [2] Lines of code comparisons are completely meaningless compared to these factors. They just take code out of context.&lt;br /&gt;&lt;h2&gt;&lt;br /&gt;LOC matter&lt;br /&gt;&lt;/h2&gt;&lt;br /&gt;You can compare LOC because the less code you write, the fewer bugs you will tend to have. Also, as a matter of common sense, it takes less time to write less code. If I can write a program that does the same thing as yours in less lines of code, it will be easier to maintain and add things because I will have to do less searching and I won't have to remember as much to find out how to change things.&lt;br /&gt;&lt;h2&gt;&lt;br /&gt;When worlds colide&lt;br /&gt;&lt;/h2&gt;&lt;br /&gt;One thing that Ruby and Java people can all agree on is:&lt;br /&gt;&lt;blockquote&gt;&lt;br /&gt;"Ruby is a very elegant and descriptive language, which makes Ruby versions of Java code generally shorter and more readable."&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt;Ruby code usually makes sense when read out-loud whereas Java code is over-laden with patterns and when it comes down to it, usually meant to be read by a compiler. That is one of the reasons Ruby people love to show code comparisons, it makes Java look over-complicated and unnecessary. Neither of these is the case, there are things you can do in Java that are simply unavailable to Ruby developers. However these comparisons ultimately lead to clashes like the following where emotions escalate and each tries to show why one is better than another.&lt;br /&gt;&lt;br /&gt;Ruby Zealot: (excited about his discovery) &lt;i&gt;hey, look how many fewer lines of code I wrote&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Java Zealot: (heard this before, what does the magazine [1] say again?) &lt;i&gt;that's stupid. it doesn't scale and you can't maintain it. you don't know what you are talking about.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Ruby Zealot: (on the defensive) &lt;i&gt;what do you mean? of course I know what I am talking about. your stupid&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Java Zealot: (on the defensive) &lt;i&gt;LOC don't matter. no silly scripting language can scale and be maintainable. you'll never get a job with your toy language.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;When it comes down to it, the essential feature that the Ruby people are claiming is that Ruby is terse. Rails makes web development terse. In Rails, the framework does the heavy lifting for you. Java people can't be expected to understand what this means unless they try doing their day to day work with Ruby. They can't understand this because Java was never meant to be terse. In fact, after many years of mastering the language, many Java developers revel in its verbosity. Java people like writing out System.out.println("Hello World!"); Some like it because they want to see and constantly be reminded of everything that is going on in their programming environment. Some like it for the same reason that people learn Klingon. Some like it because they don't know there is any other way.&lt;br /&gt;&lt;br /&gt;Everyone is entitled to their opinions. My girlfriend thinks that overuse of terseness is a horrible way to write. I guess I am just lazy. I don't want to write for the computer, I want to write for me. I don't want to write 900 lines of Java and XML so that the computer can understand it easier, I want to write 600 lines of Ruby that I can read out-loud to myself because I love to program. I want to let Ruby do the heavy lifting for me, and I hate repeating myself. It is from this train of thought that Rails grows and flourishes.&lt;br /&gt;&lt;br /&gt;Nobody's opinion can be forced one way or the other, but many humans prefer to be lazy and let machines work for them. Rails is the natural extension of this for the web-based programmers. That is why you will tend to see Java developers turning into Rails developers and not the other way around. This scares the Java community. Sure some Java developers will look at Rails and say, "that's not for me, I am already comfortable", but I can't imagine many Rails developers saying, "please let me work harder to do the same amount of work".&lt;br /&gt;&lt;br /&gt;With regard to the bulk of websites, from low to high complexity, anybody that says that (Rails|Java|PHP|Python|etc.) can't cut it is ignorant and afraid to learn anything that he doesn't already believe in. These people are stuck in their ways and don't have anything constructive to say that transcends their day to day lives. Ebay and Amazon use Java, Yahoo and Friendster use PHP, Google uses Python, Livejournal uses Perl. Rails has been around for only 9 months, but it will have a household name backing it soon too. It has a lot to do with taste, although if you are talking about time-to-market, this changes the playing field. As Paul Graham has shown, terseness in programming has a lot of strong advantages.&lt;br /&gt;&lt;br /&gt;In sum, Java zealots, please stop complaining any time David posts stories about people changing their opinions, he has a right to be proud of his hard work just like you do. Ruby zealots, let's be understanding that there are some people who happen to like excessive typing more than us.&lt;br /&gt;&lt;br /&gt;[1] Food for though: Rails has no substantial corporate backing. It has no million dollar marketing campaign. These are regular programmers from many different backgrounds coming forward about Rails. They are the ones that you work with every day. Many of them to this day probably have not read David's blog, they simply send their stories to David who rightfully enjoys publishing them. Nobody is paying these people or twisting their arms, because there is nobody to do either of these things. Sun pays a lot of people to say a lot of things. Many companies like Java because they know Sun in a company like them. Companies twist arms, lie, and deceive every day in the name of their shareholders.&lt;br /&gt;&lt;br /&gt;[2] From whom do you hear these questions most often: managers or programers? Who are the ones that take out advertisements proclaiming (not explaining) the answer on the pages of PC Magazine and Doctor Dob's Journal?
&lt;p&gt;&lt;map name="google_ad_map_1NDqdgSxgtXN3FivLe3kl5qMYe0_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/1NDqdgSxgtXN3FivLe3kl5qMYe0_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_1NDqdgSxgtXN3FivLe3kl5qMYe0_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=1NDqdgSxgtXN3FivLe3kl5qMYe0_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F06%2Fruby-vs-java-matter-of-taste_09.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=109" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114983681607201942" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114983681607201942" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/06/ruby-vs-java-matter-of-taste_09.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-114982759033220893</id><published>2006-06-08T21:31:00.000-07:00</published><updated>2006-11-13T11:14:57.729-08:00</updated><title type="text">Guide to Installing Myst V on Mac OS X Intel</title><content type="html">I am not a gamer. For some reason it is not in my DNA. However I love Myst. I have every game in the series, and those are about the only games I own. Today was my birthday and my brother got me the 5th Myst in the series. I also just purchased a MacBook Pro, so to my astonishment I found myself unable to install with an error.&lt;br /&gt;&lt;br /&gt;"Ah," I said to myself, "a challenge."&lt;br /&gt;&lt;br /&gt;The following information is not to be used by anyone because the EULA might prevent you from doing so. It is for informational purposes only and mainly takes place on the command line within the Terminal.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;cd ~&lt;br /&gt;mkdir myst5 &amp;&amp; cd myst5&lt;br /&gt;jar xfv /Volumes/Myst\ V\ EOA/setup.jar&lt;br /&gt;sudo cp -r /Volumes/Myst\ V\ EOA/support .&lt;br /&gt;sudo cp -r /Volumes/Myst\ V\ EOA/setup/60f3b48b952a00f915ae4b48fe453c29/md5 60f3b48b952a00f915ae4b48fe453c29&lt;br /&gt;curl -O http://www.kpdus.com/jad/macosx/jadap158.zip&lt;br /&gt;open jadap158.zip&lt;br /&gt;mv jadap158/* .&lt;br /&gt;./jad com/installshield/wizard/service/file/PureJavaFileServiceImpl.class&lt;br /&gt;open -t PureJavaFileServiceImpl.jad&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Look for public String[] getPartitionNames(). This is the place that caused the pesky error. What happened is that Intel Macs currently are missing a Java library that will provide the installer with a list of partitions for the computer. All we have to do is hard code that list and we are home free. Change it to look as follows.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;    public String[] getPartitionNames()&lt;br /&gt;        throws ServiceException&lt;br /&gt;    {&lt;br /&gt;        String as[] = new String[2];&lt;br /&gt;    as[0] = "/";&lt;br /&gt;    as[1] = "/Volumes/Myst V EOA";&lt;br /&gt;    return as;&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Save and close the file. Back to the command line.&lt;br /&gt;&lt;pre&gt;&lt;br /&gt;mv PureJavaFileServiceImpl.ja{d,va}&lt;br /&gt;javac PureJavaFileServiceImpl.java&lt;br /&gt;cp PureJavaFileServiceImpl.class com/installshield/wizard/service/file/&lt;br /&gt;java run&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Voila! Now it is time for all the Intel Apple-heads to enjoy the Myst V installer like a first class citizen.&lt;br /&gt;&lt;br /&gt;There is one more thing though. The same library that gives the installer access to a list of partitions is the one that allows you to set applications as executable. This is why you need to do a little hack to get Myst IV running on Intel Macs too. To fix it, go back to the command line, type cd and then the spacebar. Now find the Myst V program and drag it into the Terminal window and press return. Now type:&lt;br /&gt;&lt;pre&gt;chmod +x Contents/MacOS/Myst\ V\ End\ of\ Ages&lt;/pre&gt;&lt;br /&gt;Enjoy!
&lt;p&gt;&lt;map name="google_ad_map_Tp.zZ7Rx1loUiPIIfB0LsTQsKL0_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/Tp.zZ7Rx1loUiPIIfB0LsTQsKL0_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_Tp.zZ7Rx1loUiPIIfB0LsTQsKL0_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=Tp.zZ7Rx1loUiPIIfB0LsTQsKL0_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F06%2Fguide-to-installing-myst-v-on-mac-os-x.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=102" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114982759033220893" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114982759033220893" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/06/guide-to-installing-myst-v-on-mac-os-x.html</feedburner:origLink></entry><entry><id>tag:blogger.com,1999:blog-3239741.post-114982750938158593</id><published>2006-06-08T21:31:00.000-07:00</published><updated>2006-11-13T11:14:57.272-08:00</updated><title type="text">A JavaScript Based Firewall-Immobilizing Port Scanner</title><content type="html">I finally found a totally unacceptable cross-domain Ajax security issue.&lt;br /&gt;&lt;br /&gt;After the hotly debated Debunking Strong Misconceptions About Cross-Domain Ajax Security Issues, most current known security issues concerning cross-domain Ajax were explored and found wanting. All but one edge case of cross-domain Ajax that affects corporations with corporate secrets on intranets. I stand by most of my arguments and believe that many web developers still greatly mis-understand the fundamental principals behind Ajax.&lt;br /&gt;&lt;br /&gt;However, I was wrong. Very very wrong. There is something you can do with cross-domain Ajax that is deeply and fundamentally insecure. Something nobody could argue against. I was chatting with my friend Dave Fayram (whom I have started doing a podcast with) when we came across a security issue that would affect every single person who has a cross-domain Ajax enabled browser, not just the corporate intranets.&lt;br /&gt;&lt;br /&gt;If you are on a Mac, download safariexploit.html as a file onto your hard drive. Now open it up with Safari and prepared to be scared.&lt;br /&gt;&lt;br /&gt;Using the fact that the file:/// protocol in Safari allows you to do cross-domain Ajax as much as you like, you can experiment with the potential security concerns of cross-domain Ajax. I was able to build was a JavaScript based Firewall-Immobilizing Port Scanner in 50 lines of JavaScript. Luckily Safari does not allow cross-domain Ajax from the http:// protocol so this is not something that can be taken advantage of throughout the internet (there is no need to switch away from Safari because of this).&lt;br /&gt;&lt;br /&gt;What the port scanner is able to do is explore not only your localhost, but your surrounding network. It can look at the 10.0.0.0/24 and 192.168.0.0/24 ranges (as well as any other you specify). It can look at any port you want on any computer you want as long as the local machine can access it. It can even report what version SSH server and web server you are running on all of those computers. It works all in the background without your knowledge while simply viewing a page. At the end of the port scan it posts this data in a public forum that anyone can access.&lt;br /&gt;&lt;br /&gt;Nobody can argue that this isn't a Very Bad Thing. Without a white-listing crossdomain.xml file that explicitly lists other sites that are allowed to do cross-domain Ajax communication (an idea that I whole-heartedly believe would change the landscape of the web for the better without the aforementioned otherwise insurmountable security problems), cross-domain Ajax is clearly and fundamentally a very big risk that should remain unimplemented like it stands today.&lt;br /&gt;&lt;br /&gt;Many of you might laugh at this conclusion since I was so brazen in my previous post, but if someone would have given me an example half as clear as the one provided here as to why cross-domain Ajax brings up serious security concerns, I would have never had to write that post. The post was intended to straighten out false claims and try to beat out any true claims. As shown by this revelation, I succeeded. The truth remains that many people are and will remain to be confused as to why cross-domain Ajax is a bad idea. They don't understand that the grand majority of the concerns they might have already exist today in many alternative forms. Even those who understood the real security concerns introduced by cross-domain Ajax were not able to give me a clear and penetrating example.&lt;br /&gt;&lt;br /&gt;I am currently developing some very interesting applications using a hack that imitates cross-domain Ajax (without any of the security concerns mentioned here). This is why I wanted to explore in detail the security issues surrounding the technology. Google was unable to shed much light because people were not having enlightening conversations, so I am very thankful to all of you who commented on the previous post. I am glad there is now a permanently recorded insightful conversation for a relatively misunderstood topic.&lt;br /&gt;&lt;br /&gt;If anyone from IE, Firefox, or Apple is listening, please please please integrate the use of crossdomain.xml policy file and allow us developers some secure cross-domain freedom. The web is missing out on a lot of innovative applications and too many people are creating ugly hacks to get around it.
&lt;p&gt;&lt;map name="google_ad_map_hZlxY-Cj4CXcdl57ol4qQxDZyHc_"&gt;&lt;area shape="rect" href="http://imageads.googleadservices.com/pagead/imgclick/hZlxY-Cj4CXcdl57ol4qQxDZyHc_?pos=0" coords="1,2,367,28"/&gt;&lt;area shape="rect" href="http://services.google.com/feedback/abg" coords="384,10,453,23"/&gt;&lt;/map&gt;&lt;img usemap="#google_ad_map_hZlxY-Cj4CXcdl57ol4qQxDZyHc_" border="0" src="http://imageads.googleadservices.com/pagead/ads?format=468x30_aff_img&amp;client=ca-pub-8531813895929183&amp;channel=2762548411&amp;output=png&amp;cuid=hZlxY-Cj4CXcdl57ol4qQxDZyHc_&amp;url=http%3A%2F%2Ftech.rufy.com%2F2006%2F06%2Fjavascript-based-firewall-immobilizing.html"/&gt;&lt;/p&gt;</content><link rel="alternate" type="text/html" href="http://feeds.feedburner.com/rufytech?m=103" /><link rel="self" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114982750938158593" /><link rel="edit" type="application/atom+xml" href="http://www.blogger.com/feeds/3239741/posts/default/114982750938158593" /><author><name>Lucas Carlson</name><uri>http://rufy.com/</uri></author><feedburner:origLink>http://tech.rufy.com/2006/06/javascript-based-firewall-immobilizing.html</feedburner:origLink></entry><feedburner:awareness>http://api.feedburner.com/awareness/1.0/GetFeedData?uri=rufytech</feedburner:awareness></feed>
